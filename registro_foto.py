################################################################################
#
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with 
# this program. If not, see <https://www.gnu.org/licenses/>. 
#
# Copyright 2025 Nelson R. Salinas
#
################################################################################

import streamlit as st
import pandas as pd
import gspread
import datetime
import pytz

gc = gspread.service_account_from_dict(st.secrets.credentials)
tz = pytz.timezone('America/Bogota')

if 'errors' not in st.session_state:
	st.session_state.errors = ''

if 'data' not in st.session_state:
	st.session_state.data = None

if 'submitted' not in st.session_state:
	st.session_state.submitted = False

##########     Object lists    ##############
listas = pd.read_csv("Lista_categorias.csv")
plants = listas.query('Plantas.notna()').Plantas.sort_values().to_list()
birds = listas.query('Aves.notna()').Aves.to_list()
insects = listas.query('Insectos.notna()').Insectos.to_list()
#animals = sorted(birds + insects)
taxa = sorted(birds + insects + plants)
observers = listas.query('Observadores.notna()').Observadores.to_list()
sites = listas.query('Sitios.notna()').Sitios.to_list()

digitizers = ['Angela', 'Nelson']

#observers = [
#	'Juliana Zuluaga',
#	'Carlos Vargas',
#	'Nelson Salinas'
#	]


id_observaciones = []

st.markdown("""

# Jard칤n Bot치nico de Bogot치

## Programa Conservaci칩n _in situ_

### Formato de digitalizaci칩n de registros de especies a partir de fotograf칤as.

#### Instrucciones

Insertar las observaciones en la forma abajo. Una vez termine de digitar los datos de una observaci칩n, presione el bot칩n :red[**Validar**] para validar los datos. Si existen errores, un mensaje aparecer치 indicando la naturaleza del error. Los datos no ser치n guardados si son err칩neos, as칤 que deben ser corregidos para que puedan ser guardados.

""")

# This doesn't work in Linux -> :blue-background[:red[**Enviar**]] 

def validate():
	"""
	Rutina principal de validadci칩n de informaci칩n del formulario.
	"""

	if st.secrets.token != st.session_state.token:
		st.session_state.errors += 'El token de autenticaci칩n es incorrecto.\n\n'

	if st.session_state.date is None:
		#st.info('Error: Falta fecha de observaci칩n.', icon="游댠")
		st.session_state.errors += 'La fecha de observaci칩n es un campo obligatorio.\n\n'

	if st.session_state.photo:
		
		if len(st.session_state.photo.name) < 5:
			#st.info("El nombre de la fotograf칤a es sospechosamente peque침o.")
			st.session_state.errors += "El nombre de la fotograf칤a es sospechosamente peque침o.\n\n"
		
	else:
		st.session_state.errors += "No hay fotograf칤a adjudicada a la observaci칩n.\n\n"

	if st.session_state.observer is None:
		st.session_state.errors += 'El nombre del observador es un campo obligatorio.\n\n'

	if st.session_state.digitizer is None:
		st.session_state.errors += 'El digitador es un campo obligatorio.\n\n'

	if st.session_state.sp1 is None:
		if st.session_state.sp1alt is None:
			st.session_state.errors += 'El nombre de la especie 1 es obligatorio.\n\n'

	if st.session_state.site is None \
		and (st.session_state.lon is None or st.session_state.lat is None):

		st.session_state.errors += "Una ubicaci칩n geogr치fica es obligatoria, ya sea 'Sitio' o coordenadas geogr치ficas.\n\n"

	st.session_state.submitted = False




def submit():
	
	sh = gc.open_by_key(st.secrets.table_link).worksheet(st.session_state.digitizer)
	now = datetime.datetime.now(tz)
	row = [
		str(st.session_state.date),
		st.session_state.photo.name,
		st.session_state.observer,
	]

	if st.session_state.sp1:
		row.append(st.session_state.sp1)
	else:
		row.append(st.session_state.sp1alt)
		
	row += [
		st.session_state.lat,
		st.session_state.lon,
		st.session_state.site,
		now.strftime('%Y-%m-%d %H:%M:%S'),
		st.session_state.digitizer,
	]
	sh.append_row(row)
	st.session_state.submitted = True




with st.form(
	"Fotograf칤as - Registro de especies",
	clear_on_submit=True,
	):

	st.text_input(
		"Token de autenticaci칩n",
		help="Token de validaci칩n de usuario",
		placeholder='Digite el token',
		value=None,
		key="token"
	)

	st.date_input(
		"Fecha",
		help="Fecha en la cual fue realizada la observaci칩n.",
		value=None,
		key="date",
	)

	st.file_uploader(
		"Seleccione una fotograf칤a", 
		key="photo",
		help='Fotograf칤a base de observaci칩n.'
	)
	
	st.selectbox(
		"Observador", 
		observers, 
		index=None, 
		key='observer',
		placeholder="Seleccione un investigador",
		help='Persona que tom칩 la fotograf칤a'
	)

	st.selectbox(
		"Digitalizador", 
		digitizers, 
		index=None, 
		key='digitizer',
		placeholder="Seleccione un investigador",
		help='Persona que sistematiza la fotograf칤a'
	)

	st.selectbox(
		"Especie", 
		taxa,
		index=None, 
		key="sp1",
		placeholder='Digite el nombre cient칤fico',
		help="Nombre cient칤fico (sin autores) de la especie 1",
	)

	st.text_input(
		"Especie (si no est치 en el listado de arriba)",
		key="sp1alt",
		placeholder='Digite el nombre cient칤fico',
		help="Si el nombre cient칤fico de la especie no est치 en la lista de arriba, digitelo aqu칤. Verifique la ortograf칤a en una base de datos apropiada (por ejemplo, GBIF).",
	)

	st.number_input(
		"Latitud", 
		key="lat",
		value=None,
		placeholder="Latitud",
		help='Latitud de la observaci칩n en formato decimal (e.g., 3.09284)',
		max_value=4.838990,
		min_value=3.725902,
		step=0.00001
	)

	st.number_input(
		"Longitud", 
		key="lon",
		value=None,
		placeholder="Longitud",
		help='Longitud de la observaci칩n en formato decimal (e.g., -77.2360184)',
		min_value=-74.2248,
		max_value=-73.99194,
		step=0.00001
	)

	st.selectbox(
		"Sitio", 
		sites, 
		index=None, 
		key='site',
		placeholder="Seleccione un sitio",
		help='Sitio (parque, localidad, etc.) donde se realiz칩 la observaci칩n.'
	)


	st.form_submit_button('Validar', on_click=validate)

pretty_data = st.empty()

if len(st.session_state.errors) > 0:
	st.session_state.errors = "# Error\n\n" + st.session_state.errors
	st.info(st.session_state.errors)


else:

	# Present data before upload

	with pretty_data.container():

		if st.session_state.date:
			st.write(f"Fecha observaci칩n: '{str(st.session_state.date)}'")

		if st.session_state.photo:
			st.write(f"Nombre de la fotograf칤a: '{str(st.session_state.photo.name)}'")

		if st.session_state.observer:
			st.write(f"Observador: '{st.session_state.observer}'")

		if st.session_state.digitizer:
			st.write(f"Digitador: '{st.session_state.digitizer}'")

		if st.session_state.sp1:
			st.write(f"Especie: '{st.session_state.sp1}'")

		elif st.session_state.sp1alt:
			st.write(f"Especie: '{st.session_state.sp1alt}'")

		if st.session_state.lat:
			st.write(f"Latitud: '{st.session_state.lat}'")

		if st.session_state.lon:
			st.write(f"Longitud: '{st.session_state.lon}'")

		if st.session_state.site:
			st.write(f"Sitio: '{st.session_state.site}'")


	st.markdown("""Si los datos arriba son correctos, presione el bot칩n :red[**Guardar**] para enviar los datos.""")

	st.button("Guardar", on_click=submit)

	if st.session_state.submitted:
		pretty_data.empty()




exit(0)